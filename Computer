2a
2a
import math as mathe

range_of_prime = [0 for i in range(10000)]


def calc_prime(n):
    for i in range(1, n + 2):
        range_of_prime[i] = True

    range_of_prime[1] = False

    for p in range(2, mathe.ceil(n ** (0.5))):
        if (range_of_prime[p] == True):
            for i in range(p * p, n + 1, p):
                range_of_prime[i] = False


def isPowerOfTwo(n):
    return (n and (n & (n - 1)) == False)


def isProthNumber(n):
    k = 1
    while (k < (n // k)):
        if (n % k == 0):
            if (isPowerOfTwo(n // k)):
                return True
        k = k + 2
    return False


def isProthrange_of_prime(n):
    if (isProthNumber(n - 1)):

        if (range_of_prime[n]):
            return True
        else:
            return False
    else:
        return False


n = eval(input('Specify a number to check for ProthPrimes within: '))
calc_prime(n)

for i in range(1, n + 1):
    if isProthrange_of_prime(i) == True:
        print(i, 'is a ProthPrime Number')

2b
Recursion is faster for the smaller amount of numbers, but as the value of nth element increases recursion becomes slower and iteration becomes faster. 
Here are the three different results for three different n:
